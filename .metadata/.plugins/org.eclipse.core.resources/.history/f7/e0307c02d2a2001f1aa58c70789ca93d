package p3Arboles;

/**
* Clase derivada de BSTNode a単adiendo funcionalidad de AVL
* @author Profesores ED (Espa単ol)
* @version 2024-25 distribuible
*
*/
public class AVLNode<T extends Comparable<T>> extends BSTNode<T>  {

/**
* Para almacenar la altura del nodo
*/
protected int height;

/**
* Para almacenar al Factor de balance.
* Puede no existir y calcularse cada vez a partir de la altura de los hijos.
*/
protected int balanceFactor;


/**
* Llama al padre y a単ade la informacion propia
* se le pasa la informacion que se mete en el nuevo nodo
*/
public AVLNode(T info){
	super(info);
	
}



/**
* devuelve la altura del arbol del cual es raiz el nodo en cuestion
*/
public int getHeight() {
	return height;
}



/**
* Devuelve el factor de balance segun equilibrio del arbol del cual es raiz
*/
public int getBF() {
	return balanceFactor;
}



/**
* Actualiza la altura del nodo en el arbol utilizando la altura de los hijos
* y si es preciso actualiza el FB
*/
protected void updateHeight() {
	height = ((AVLNode)super.getRight()).getHeight()- ((AVLNode)super.getLeft()).getHeight();
}


/* (non-Javadoc)
* @see BSTNode#getLeft()
*/
public AVLNode<T> getLeft(){
return (AVLNode<T>) super.getLeft();
}


/* (non-Javadoc)
* @see BSTNode#getRight()
*/
public AVLNode<T> getRight() {
return (AVLNode<T>) super.getRight();
}

// No se necesitan los setters, valen los heredados


/* (non-Javadoc)
* @see BSTNode#toString()
* A単ade factor de balance
*/
public String toString() {
return super.toString()+":BF="+ getBF();
}

}

